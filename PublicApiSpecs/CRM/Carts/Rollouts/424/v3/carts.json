{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Carts",
    "description" : "",
    "version" : "v3",
    "x-hubspot-product-tier-requirements" : {
      "marketing" : "FREE",
      "sales" : "FREE",
      "service" : "FREE",
      "cms" : "FREE"
    },
    "x-hubspot-documentation-banner" : "NONE",
    "x-hubspot-api-use-case" : "When a customer adds a set of products to their cart and makes a purchase, store that purchase as an individual order. You can then update that order with tracking information once the shipping label has been printed.",
    "x-hubspot-related-documentation" : [ {
      "name" : "Carts overview",
      "url" : "https://developers.hubspot.com/beta-docs/guides/api/crm/commerce/carts"
    } ],
    "x-hubspot-introduction" : "Use the orders API to create and manage data related to ecommerce purchases in HubSpot. This can be especially useful for keeping HubSpot data synced with external ecommerce platforms, such as Shopify and NetSuite."
  },
  "servers" : [ {
    "url" : "https://api.hubapi.com"
  } ],
  "tags" : [ {
    "name" : "Batch"
  }, {
    "name" : "Basic"
  }, {
    "name" : "Search"
  } ],
  "paths" : {
    "/crm/v3/objects/carts/batch/read" : {
      "post" : {
        "tags" : [ "Batch" ],
        "summary" : "Read a batch of carts by internal ID, or unique property values",
        "operationId" : "post-/crm/v3/objects/carts/batch/read",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "description" : "Whether to return only results that have been archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchReadInputSimplePublicObjectId"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.read" ]
        }, {
          "private_apps" : [ "crm.objects.carts.read" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/{cartId}" : {
      "get" : {
        "tags" : [ "Basic" ],
        "summary" : "Read",
        "description" : "Read an Object identified by `{cartId}`. `{cartId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param.  Control what is returned via the `properties` query param.",
        "operationId" : "get-/crm/v3/objects/carts/{cartId}",
        "parameters" : [ {
          "name" : "cartId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "propertiesWithHistory",
          "in" : "query",
          "description" : "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "associations",
          "in" : "query",
          "description" : "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Whether to return only results that have been archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "idProperty",
          "in" : "query",
          "description" : "The name of a property whose values are unique for this object type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimplePublicObjectWithAssociations"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.read" ]
        }, {
          "private_apps" : [ "crm.objects.carts.read" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Basic" ],
        "summary" : "Archive",
        "description" : "Move an Object identified by `{cartId}` to the recycling bin.",
        "operationId" : "delete-/crm/v3/objects/carts/{cartId}",
        "parameters" : [ {
          "name" : "cartId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      },
      "patch" : {
        "tags" : [ "Basic" ],
        "summary" : "Update",
        "description" : "Perform a partial update of an Object identified by `{cartId}`. `{cartId}` refers to the internal object ID by default, or optionally any unique property value as specified by the `idProperty` query param. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.",
        "operationId" : "patch-/crm/v3/objects/carts/{cartId}",
        "parameters" : [ {
          "name" : "cartId",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "idProperty",
          "in" : "query",
          "description" : "The name of a property whose values are unique for this object type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimplePublicObjectInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimplePublicObject"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/batch/archive" : {
      "post" : {
        "tags" : [ "Batch" ],
        "summary" : "Archive a batch of carts by ID",
        "operationId" : "post-/crm/v3/objects/carts/batch/archive",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputSimplePublicObjectId"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/batch/create" : {
      "post" : {
        "tags" : [ "Batch" ],
        "summary" : "Create a batch of carts",
        "operationId" : "post-/crm/v3/objects/carts/batch/create",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputSimplePublicObjectInputForCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/batch/update" : {
      "post" : {
        "tags" : [ "Batch" ],
        "summary" : "Update a batch of carts",
        "operationId" : "post-/crm/v3/objects/carts/batch/update",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputSimplePublicObjectBatchInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObject"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicObjectWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts" : {
      "get" : {
        "tags" : [ "Basic" ],
        "summary" : "List",
        "description" : "Read a page of carts. Control what is returned via the `properties` query param.",
        "operationId" : "get-/crm/v3/objects/carts",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of results to display per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "A comma separated list of the properties to be returned in the response. If any of the specified properties are not present on the requested object(s), they will be ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "propertiesWithHistory",
          "in" : "query",
          "description" : "A comma separated list of the properties to be returned along with their history of previous values. If any of the specified properties are not present on the requested object(s), they will be ignored. Usage of this parameter will reduce the maximum number of objects that can be read by a single request.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "associations",
          "in" : "query",
          "description" : "A comma separated list of object types to retrieve associated IDs for. If any of the specified associations do not exist, they will be ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Whether to return only results that have been archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseSimplePublicObjectWithAssociationsForwardPaging"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.read" ]
        }, {
          "private_apps" : [ "crm.objects.carts.read" ]
        } ]
      },
      "post" : {
        "tags" : [ "Basic" ],
        "summary" : "Create",
        "description" : "Create a cart with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard carts is provided.",
        "operationId" : "post-/crm/v3/objects/carts",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SimplePublicObjectInputForCreate"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimplePublicObject"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/batch/upsert" : {
      "post" : {
        "tags" : [ "Batch" ],
        "summary" : "Create or update a batch of carts by unique property values",
        "operationId" : "post-/crm/v3/objects/carts/batch/upsert",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputSimplePublicObjectBatchInputUpsert"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicUpsertObject"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseSimplePublicUpsertObjectWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.write" ]
        }, {
          "private_apps" : [ "crm.objects.carts.write" ]
        } ]
      }
    },
    "/crm/v3/objects/carts/search" : {
      "post" : {
        "tags" : [ "Search" ],
        "operationId" : "post-/crm/v3/objects/carts/search",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PublicObjectSearchRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseWithTotalSimplePublicObjectForwardPaging"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "crm.objects.carts.read" ]
        }, {
          "private_apps" : [ "crm.objects.carts.read" ]
        } ],
        "x-hubspot-rate-limit-exemptions" : [ "ten-secondly" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "StandardError" : {
        "required" : [ "category", "context", "errors", "links", "message", "status" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "object",
            "properties" : { }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "CollectionResponseAssociatedId" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AssociatedId"
            }
          }
        }
      },
      "PublicAssociationsForObject" : {
        "required" : [ "to", "types" ],
        "type" : "object",
        "properties" : {
          "types" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AssociationSpec"
            }
          },
          "to" : {
            "$ref" : "#/components/schemas/PublicObjectId"
          }
        }
      },
      "BatchResponseSimplePublicObject" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "completedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requestedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObject"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "FilterGroup" : {
        "required" : [ "filters" ],
        "type" : "object",
        "properties" : {
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Filter"
            }
          }
        }
      },
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          }
        }
      },
      "ForwardPaging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          }
        }
      },
      "SimplePublicObjectId" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          }
        }
      },
      "BatchResponseSimplePublicUpsertObjectWithErrors" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "completedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "numErrors" : {
            "type" : "integer",
            "format" : "int32"
          },
          "requestedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicUpsertObject"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "BatchReadInputSimplePublicObjectId" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "propertiesWithHistory" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "idProperty" : {
            "type" : "string",
            "description" : "The name of a property whose values are unique for this object"
          },
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectId"
            }
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BatchResponseSimplePublicUpsertObject" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "completedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "requestedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicUpsertObject"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "BatchInputSimplePublicObjectId" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectId"
            }
          }
        }
      },
      "ValueWithTimestamp" : {
        "required" : [ "sourceType", "timestamp", "value" ],
        "type" : "object",
        "properties" : {
          "sourceId" : {
            "type" : "string"
          },
          "sourceType" : {
            "type" : "string"
          },
          "sourceLabel" : {
            "type" : "string"
          },
          "updatedByUserId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "value" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInputUpsert" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectBatchInputUpsert"
            }
          }
        }
      },
      "CollectionResponseWithTotalSimplePublicObjectForwardPaging" : {
        "required" : [ "results", "total" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paging" : {
            "$ref" : "#/components/schemas/ForwardPaging"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObject"
            }
          }
        }
      },
      "SimplePublicObject" : {
        "required" : [ "createdAt", "id", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-10-30T03:30:17.883+00:00"
          },
          "archived" : {
            "type" : "boolean",
            "example" : false
          },
          "archivedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "propertiesWithHistory" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "id" : {
            "type" : "string",
            "example" : "512"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "nullable" : true
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "example" : "2019-12-07T16:50:06.678+00:00"
          }
        },
        "example" : {
          "id" : "512",
          "properties" : {
            "createdate" : "2019-10-30T03:30:17.883Z",
            "hs_cart_name" : "Cart Name",
            "hs_currency_code" : "USD",
            "hs_external_created_date" : "1709814663",
            "hs_lastmodifieddate" : "2019-12-07T16:50:06.678Z",
            "hs_source_store" : "Store Name",
            "hs_total_price" : "100.00"
          },
          "createdAt" : "2019-10-30T03:30:17.883Z",
          "updatedAt" : "2019-12-07T16:50:06.678Z",
          "archived" : false
        }
      },
      "PublicObjectId" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          }
        }
      },
      "Paging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          },
          "prev" : {
            "$ref" : "#/components/schemas/PreviousPage"
          }
        }
      },
      "PublicObjectSearchRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string"
          },
          "limit" : {
            "type" : "integer",
            "format" : "int32"
          },
          "after" : {
            "type" : "string"
          },
          "sorts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filterGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterGroup"
            }
          }
        }
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ],
              "invalidPropertyName" : [ "propertyValue" ]
            }
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps",
            "example" : {
              "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "Invalid input (details will vary based on the error)"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category",
            "example" : "VALIDATION_ERROR"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "SimplePublicObjectBatchInputUpsert" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "idProperty" : {
            "type" : "string",
            "description" : "The name of a property whose values are unique for this object"
          },
          "objectWriteTraceId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          }
        }
      },
      "BatchResponseSimplePublicObjectWithErrors" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "completedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "numErrors" : {
            "type" : "integer",
            "format" : "int32"
          },
          "requestedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObject"
            }
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "SimplePublicObjectInput" : {
        "type" : "object",
        "properties" : {
          "objectWriteTraceId" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          }
        },
        "example" : {
          "properties" : {
            "hs_cart_name" : "Cart Name",
            "hs_total_price" : "100.00",
            "hs_source_store" : "Store Name",
            "hs_currency_code" : "USD",
            "hs_external_created_date" : "1709814663"
          },
          "associations" : [ {
            "to" : {
              "id" : "1"
            },
            "types" : [ {
              "associationCategory" : "HUBSPOT_DEFINED",
              "associationTypeId" : 2
            } ]
          } ]
        }
      },
      "CollectionResponseSimplePublicObjectWithAssociationsForwardPaging" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/ForwardPaging"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectWithAssociations"
            }
          }
        }
      },
      "AssociationSpec" : {
        "required" : [ "associationCategory", "associationTypeId" ],
        "type" : "object",
        "properties" : {
          "associationCategory" : {
            "type" : "string",
            "enum" : [ "HUBSPOT_DEFINED", "USER_DEFINED", "INTEGRATOR_DEFINED" ]
          },
          "associationTypeId" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "SimplePublicObjectWithAssociations" : {
        "required" : [ "createdAt", "id", "properties", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "associations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CollectionResponseAssociatedId"
            }
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "archived" : {
            "type" : "boolean"
          },
          "archivedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "propertiesWithHistory" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "id" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string",
              "nullable" : true
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "example" : {
          "properties" : {
            "createdate" : "2019-10-30T03:30:17.883Z",
            "hs_cart_name" : "Cart Name",
            "hs_currency_code" : "USD",
            "hs_external_created_date" : "1709814663",
            "hs_lastmodifieddate" : "2019-12-07T16:50:06.678Z",
            "hs_source_store" : "Store Name",
            "hs_total_price" : "100.00"
          }
        }
      },
      "Filter" : {
        "required" : [ "operator", "propertyName" ],
        "type" : "object",
        "properties" : {
          "highValue" : {
            "type" : "string"
          },
          "propertyName" : {
            "type" : "string"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "value" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string",
            "description" : "null",
            "enum" : [ "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "BETWEEN", "IN", "NOT_IN", "HAS_PROPERTY", "NOT_HAS_PROPERTY", "CONTAINS_TOKEN", "NOT_CONTAINS_TOKEN" ]
          }
        }
      },
      "BatchInputSimplePublicObjectBatchInput" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectBatchInput"
            }
          }
        }
      },
      "BatchInputSimplePublicObjectInputForCreate" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SimplePublicObjectInputForCreate"
            }
          }
        }
      },
      "PreviousPage" : {
        "required" : [ "before" ],
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          }
        }
      },
      "SimplePublicUpsertObject" : {
        "required" : [ "createdAt", "id", "new", "properties", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "archived" : {
            "type" : "boolean"
          },
          "archivedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "new" : {
            "type" : "boolean"
          },
          "propertiesWithHistory" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ValueWithTimestamp"
              }
            }
          },
          "id" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "SimplePublicObjectBatchInput" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "idProperty" : {
            "type" : "string",
            "description" : "The name of a property whose values are unique for this object",
            "example" : "my_unique_property_name"
          },
          "objectWriteTraceId" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string",
            "description" : "The id to be updated. This can be the object id, or the unique property value of the idProperty property"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          }
        },
        "example" : {
          "id" : "1",
          "properties" : {
            "hs_cart_name" : "Cart Name",
            "hs_total_price" : "100.00",
            "hs_source_store" : "Store Name",
            "hs_currency_code" : "USD",
            "hs_external_created_date" : "1709814663"
          }
        }
      },
      "AssociatedId" : {
        "required" : [ "id", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          }
        }
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "?after=NTI1Cg%3D%3D"
          },
          "after" : {
            "type" : "string",
            "example" : "NTI1Cg%3D%3D"
          }
        },
        "example" : {
          "after" : "NTI1Cg%3D%3D",
          "link" : "?after=NTI1Cg%3D%3D"
        }
      },
      "SimplePublicObjectInputForCreate" : {
        "type" : "object",
        "properties" : {
          "associations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicAssociationsForObject"
            }
          },
          "objectWriteTraceId" : {
            "type" : "string"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "example" : {
              "hs_cart_name" : "cartName",
              "hs_currency_code" : "USD",
              "hs_external_cart_id" : "12345678910"
            }
          }
        },
        "example" : {
          "properties" : {
            "hs_cart_name" : "Cart Name",
            "hs_total_price" : "100.00",
            "hs_source_store" : "Store Name",
            "hs_currency_code" : "USD",
            "hs_external_created_date" : "1709814663"
          },
          "associations" : [ {
            "to" : {
              "id" : "1"
            },
            "types" : [ {
              "associationCategory" : "HUBSPOT_DEFINED",
              "associationTypeId" : 2
            } ]
          } ]
        }
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2_legacy" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "crm.objects.custom.read" : "View custom object records",
              "tickets" : "Read and write tickets",
              "crm.objects.goals.read" : "Read goals",
              "media_bridge.read" : "Read media and media events",
              "crm.objects.custom.write" : "Change custom object records",
              "e-commerce" : "e-commerce"
            }
          }
        }
      },
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "crm.objects.courses.write" : "Write courses",
              "crm.objects.carts.write" : "Write cart",
              "crm.objects.listings.read" : "Read listings",
              "crm.objects.contacts.read" : " ",
              "crm.objects.orders.read" : "Read Orders",
              "crm.objects.services.read" : "Read services",
              "crm.objects.quotes.read" : "Quotes",
              "crm.objects.orders.write" : "Write orders",
              "crm.objects.carts.read" : "Read carts",
              "crm.objects.subscriptions.read" : "Read Commerce Subscriptions",
              "crm.objects.leads.write" : "Modify lead objects",
              "crm.objects.commercepayments.read" : "Read the COMMERCE_PAYMENT object.",
              "crm.objects.users.write" : "Write User CRM objects",
              "crm.objects.contacts.write" : " ",
              "crm.objects.companies.write" : " ",
              "crm.objects.listings.write" : "Write listings",
              "crm.objects.line_items.write" : "Line Items",
              "crm.objects.deals.write" : " ",
              "crm.objects.partner-clients.read" : "View Partner Client CRM objects",
              "crm.objects.invoices.read" : "Read invoices objects",
              "crm.objects.deals.read" : " ",
              "crm.objects.courses.read" : "Read courses",
              "crm.objects.line_items.read" : "Line Items",
              "crm.objects.services.write" : "Write services",
              "crm.objects.appointments.write" : "Write appointments",
              "crm.objects.leads.read" : "Read lead objects",
              "crm.objects.partner-clients.write" : "Modify Partner Client CRM objects",
              "crm.objects.appointments.read" : "Read appointments",
              "crm.objects.companies.read" : " ",
              "crm.objects.users.read" : "Read User CRM objects",
              "crm.objects.quotes.write" : "Quotes"
            }
          }
        }
      },
      "private_apps_legacy" : {
        "type" : "apiKey",
        "name" : "private-app-legacy",
        "in" : "header"
      },
      "private_apps" : {
        "type" : "apiKey",
        "name" : "private-app",
        "in" : "header"
      }
    }
  }
}