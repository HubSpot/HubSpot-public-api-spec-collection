{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Lists",
    "version" : "v3",
    "x-hubspot-product-tier-requirements" : {
      "marketing" : "STARTER",
      "cms" : "STARTER"
    },
    "x-hubspot-documentation-banner" : "NONE",
    "x-hubspot-api-use-case" : "You want to bulk add contacts to a particular list, or remove company records from a company list.",
    "x-hubspot-related-documentation" : [ {
      "name" : "Lists Guide",
      "url" : "https://developers.hubspot.com/beta-docs/guides/api/crm/lists/overview"
    } ],
    "x-hubspot-introduction" : "Use the lists API to manage list memberships for object lists."
  },
  "servers" : [ {
    "url" : "https://api.hubapi.com"
  } ],
  "tags" : [ {
    "name" : "Lists"
  }, {
    "name" : "Memberships"
  }, {
    "name" : "Folders"
  }, {
    "name" : "Mapping"
  } ],
  "paths" : {
    "/crm/v3/lists/{listId}/update-list-name" : {
      "put" : {
        "tags" : [ "Lists" ],
        "summary" : "Update List Name",
        "description" : "Update the name of a list. The name must be globally unique relative to all other public lists in the portal.",
        "operationId" : "put-/crm/v3/lists/{listId}/update-list-name_updateName",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list to update.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listName",
          "in" : "query",
          "description" : "The name to update the list to.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeFilters",
          "in" : "query",
          "description" : "A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListUpdateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/add-and-remove" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add and/or Remove Records from a List",
        "description" : "Add and/or remove records that have already been created in the system to and/or from a list.\n\nThis endpoint only works for lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add-and-remove_addAndRemove",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the `MANUAL` or `SNAPSHOT` list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MembershipChangeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Fetch List by ID",
        "description" : "Fetch a single list by **ILS list ID**.",
        "operationId" : "get-/crm/v3/lists/{listId}_getById",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list to fetch.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeFilters",
          "in" : "query",
          "description" : "A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFetchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Lists" ],
        "summary" : "Delete a List",
        "description" : "Delete a list by **ILS list ID**. Lists deleted through this endpoint can be restored up to 90-days following the delete. After 90-days, the list is purged and can no longer be restored.",
        "operationId" : "delete-/crm/v3/lists/{listId}_remove",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/update-list-filters" : {
      "put" : {
        "tags" : [ "Lists" ],
        "summary" : "Update List Filter Definition",
        "description" : "Update the filter branch definition of a `DYNAMIC` list. Once updated, the list memberships will be re-evaluated and updated to match the new definition.",
        "operationId" : "put-/crm/v3/lists/{listId}/update-list-filters_updateListFilters",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list to update.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "enrollObjectsInWorkflows",
          "in" : "query",
          "description" : "A flag indicating whether or not the memberships added to the list as a result of the filter change should be enrolled in workflows that are relevant to this list.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListFilterUpdateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListUpdateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/search" : {
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Search Lists",
        "description" : "Search lists by list name or page through all lists by providing an empty `query` value.",
        "operationId" : "post-/crm/v3/lists/search_doSearch",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListSearchRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListSearchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/folders/move-list" : {
      "put" : {
        "tags" : [ "Folders" ],
        "summary" : "Moves a list to a given folder",
        "description" : "Given a list and a folder, the list will be moved to that folder.",
        "operationId" : "put-/crm/v3/lists/folders/move-list_moveList",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListMoveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/add" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add Records to a List",
        "description" : "Add the records provided to the list. Records that do not exist or that are already members of the list are ignored.\n\nThis endpoint only works for lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add_add",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the `MANUAL` or `SNAPSHOT` list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/object-type-id/{objectTypeId}/name/{listName}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Fetch List by Name",
        "description" : "Fetch a single list by list name and object type.",
        "operationId" : "get-/crm/v3/lists/object-type-id/{objectTypeId}/name/{listName}_getByName",
        "parameters" : [ {
          "name" : "listName",
          "in" : "path",
          "description" : "The name of the list to fetch. This is **not** case sensitive.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "objectTypeId",
          "in" : "path",
          "description" : "The object type ID of the object types stored by the list to fetch. For example, `0-1` for a `CONTACT` list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeFilters",
          "in" : "query",
          "description" : "A flag indicating whether or not the response object list definition should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFetchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/folders/{folderId}/move/{newParentFolderId}" : {
      "put" : {
        "tags" : [ "Folders" ],
        "summary" : "Moves a folder",
        "description" : "This moves the folder from its current location to a new location. It updates the parent of this folder to the new Id given.",
        "operationId" : "put-/crm/v3/lists/folders/{folderId}/move/{newParentFolderId}_move",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newParentFolderId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFolderFetchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/idmapping" : {
      "get" : {
        "tags" : [ "Mapping" ],
        "summary" : "Translate Legacy List Id to Modern List Id",
        "description" : "This API allows translation of legacy list id to list id. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.",
        "operationId" : "get-/crm/v3/lists/idmapping_translateLegacyListIdToListId",
        "parameters" : [ {
          "name" : "legacyListId",
          "in" : "query",
          "description" : "The legacy list id from lists v1 API.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicMigrationMapping"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "post" : {
        "tags" : [ "Mapping" ],
        "summary" : "Translate Legacy List Id to Modern List Id in Batch",
        "description" : "This API allows translation of a batch of legacy list id's to list id's. This allows for a maximum of 10,000 id's. This is a temporary API allowed for mapping old id's to new id's and will expire on May 30th, 2025.",
        "operationId" : "post-/crm/v3/lists/idmapping_translateLegacyListIdToListIdBatch",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicBatchMigrationMapping"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/restore" : {
      "put" : {
        "tags" : [ "Lists" ],
        "summary" : "Restore a List",
        "description" : "Restore a previously deleted list by **ILS list ID**. Deleted lists are eligible to be restored up-to 90-days after the list has been deleted.",
        "operationId" : "put-/crm/v3/lists/{listId}/restore_restore",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list to restore.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/folders/{folderId}/rename" : {
      "put" : {
        "tags" : [ "Folders" ],
        "summary" : "Rename a folder",
        "description" : "Renames the given folderId with a new name.",
        "operationId" : "put-/crm/v3/lists/folders/{folderId}/rename_rename",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "newFolderName",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFolderFetchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/join-order" : {
      "get" : {
        "tags" : [ "Memberships" ],
        "summary" : "Fetch List Memberships Ordered by Added to List Date",
        "description" : "Fetch the memberships of a list in order sorted by the time the records were added to the list.\n\nThe `recordId`s are sorted in *ascending* order if an `after` offset or no offset is provided. If only a `before` offset is provided, then the records are sorted in *descending* order.\n\nThe `after` offset parameter will take precedence over the `before` offset in a case where both are provided.",
        "operationId" : "get-/crm/v3/lists/{listId}/memberships/join-order_getPageOrderedByAddedToListDate",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `after` the previously requested records.\n\nIf provided, then the records in the response will be the records following the offset, sorted in *ascending* order. Takes precedence over the `before` offset.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `before` the previously requested records.\n\nIf provided, then the records in the response will be the records preceding the offset, sorted in *descending* order.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of records to return in the response. The maximum `limit` is 250.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiCollectionResponseJoinTimeAndRecordId"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/add-from/{sourceListId}" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Add All Records from a Source List to a Destination List",
        "description" : "Add all of the records from a *source list* (specified by the `sourceListId`) to a *destination list* (specified by the `listId`). Records that are already members of the *destination list* will be ignored. The *destination* and *source list* IDs must be different. The *destination* and *source lists* must contain records of the same type (e.g. contacts, companies, etc.).\n\nThis endpoint only works for *destination lists* that have a `processingType` of `MANUAL` or `SNAPSHOT`. The *source list* can have any `processingType`.\n\nThis endpoint only supports a `sourceListId` for lists with less than 100,000 memberships.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/add-from/{sourceListId}_addAllFromList",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the `MANUAL` or `SNAPSHOT` *destination list*, which the *source list* records are added to.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sourceListId",
          "in" : "path",
          "description" : "The **ILS ID** of the *source list* to grab the records from, which are then added to the *destination list*.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/records/{objectTypeId}/{recordId}/memberships" : {
      "get" : {
        "tags" : [ "Memberships" ],
        "summary" : "Get lists record is member of",
        "description" : "For given record provide lists this record is member of.",
        "operationId" : "get-/crm/v3/lists/records/{objectTypeId}/{recordId}/memberships_getLists",
        "parameters" : [ {
          "name" : "objectTypeId",
          "in" : "path",
          "description" : "Object type id of the record",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recordId",
          "in" : "path",
          "description" : "Id of the record",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiCollectionResponseRecordListMembershipNoPaging"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Fetch Multiple Lists",
        "description" : "Fetch multiple lists in a single request by **ILS list ID**. The response will include the definitions of all lists that exist for the `listIds` provided.",
        "operationId" : "get-/crm/v3/lists/_getAll",
        "parameters" : [ {
          "name" : "listIds",
          "in" : "query",
          "description" : "The **ILS IDs** of the lists to fetch.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "includeFilters",
          "in" : "query",
          "description" : "A flag indicating whether or not the response object list definitions should include a filter branch definition. By default, object list definitions will not have their filter branch definitions included in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListsByIdResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Create List",
        "description" : "Create a new list with the provided object list definition.",
        "operationId" : "post-/crm/v3/lists/_create",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListCreateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListCreateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "cms.membership.access_groups.write" ]
        }, {
          "oauth2" : [ "cms.membership.access_groups.write" ]
        }, {
          "oauth2" : [ "crm.lists.write" ]
        }, {
          "private_apps" : [ "crm.lists.write" ]
        } ]
      }
    },
    "/crm/v3/lists/folders" : {
      "get" : {
        "tags" : [ "Folders" ],
        "summary" : "Retrieves a folder.",
        "description" : "Retrieves a folder and recursively includes all folders via the childNodes attribute.  The child lists field will be empty in all child nodes. Only the folder retrieved will include the child lists in that folder.",
        "operationId" : "get-/crm/v3/lists/folders_getAll",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "query",
          "description" : "The Id of the folder to retrieve.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : "0"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFolderFetchResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "post" : {
        "tags" : [ "Folders" ],
        "summary" : "Creates a folder",
        "description" : "Creates a folder with the given information.",
        "operationId" : "post-/crm/v3/lists/folders_create",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListFolderCreateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListFolderCreateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/folders/{folderId}" : {
      "delete" : {
        "tags" : [ "Folders" ],
        "summary" : "Deletes a folder",
        "description" : "Deletes the folder with the given Id.",
        "operationId" : "delete-/crm/v3/lists/folders/{folderId}_remove",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships" : {
      "get" : {
        "tags" : [ "Memberships" ],
        "summary" : "Fetch List Memberships Ordered by ID",
        "description" : "Fetch the memberships of a list in order sorted by the `recordId` of the records in the list.\n\nThe `recordId`s are sorted in *ascending* order if an `after` offset or no offset is provided. If only a `before` offset is provided, then the records are sorted in *descending* order.\n\nThe `after` offset parameter will take precedence over the `before` offset in a case where both are provided.",
        "operationId" : "get-/crm/v3/lists/{listId}/memberships_getPage",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `after` the previously requested records.\n\nIf provided, then the records in the response will be the records following the offset, sorted in *ascending* order. Takes precedence over the `before` offset.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "The paging offset token for the page that comes `before` the previously requested records.\n\nIf provided, then the records in the response will be the records preceding the offset, sorted in *descending* order.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of records to return in the response. The maximum `limit` is 250.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiCollectionResponseJoinTimeAndRecordId"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.read" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Memberships" ],
        "summary" : "Delete All Records from a List",
        "description" : "Remove **all** of the records from a list. ***Note:*** *The list is not deleted.*\n\nThis endpoint only works for lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.\n\nThis endpoint only supports lists that have less than 100,000 memberships.",
        "operationId" : "delete-/crm/v3/lists/{listId}/memberships_removeAll",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the `MANUAL` or `SNAPSHOT` list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    },
    "/crm/v3/lists/{listId}/memberships/remove" : {
      "put" : {
        "tags" : [ "Memberships" ],
        "summary" : "Remove Records from a List",
        "description" : "Remove the records provided from the list. Records that do not exist or that are not members of the list are ignored.\n\nThis endpoint only works for lists that have a `processingType` of `MANUAL` or `SNAPSHOT`.",
        "operationId" : "put-/crm/v3/lists/{listId}/memberships/remove_remove",
        "parameters" : [ {
          "name" : "listId",
          "in" : "path",
          "description" : "The **ILS ID** of the `MANUAL` or `SNAPSHOT` list.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MembershipsUpdateResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "oauth2" : [ "crm.lists.write", "crm.lists.read" ]
        }, {
          "private_apps" : [ "cms.membership.access_groups.write", "crm.lists.read" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "PublicPropertyAssociationFilterBranch" : {
        "title" : "PROPERTY_ASSOCIATION",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters", "objectTypeId", "operator", "propertyWithObjectId" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "PROPERTY_ASSOCIATION",
            "enum" : [ "PROPERTY_ASSOCIATION" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "objectTypeId" : {
            "type" : "string"
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          },
          "propertyWithObjectId" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicNumberPropertyOperation" : {
        "title" : "NUMBER",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "NUMBER",
            "enum" : [ "NUMBER" ]
          },
          "value" : {
            "type" : "number"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicYearReference" : {
        "title" : "YEAR",
        "required" : [ "day", "month", "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "YEAR",
            "enum" : [ "YEAR" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicInListFilterMetadata" : {
        "required" : [ "id", "inListType" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "inListType" : {
            "type" : "string"
          }
        }
      },
      "ListFolderFetchResponse" : {
        "required" : [ "folder" ],
        "type" : "object",
        "properties" : {
          "folder" : {
            "$ref" : "#/components/schemas/PublicListFolder"
          }
        }
      },
      "PublicRangedDatePropertyOperation" : {
        "title" : "RANGED_DATE",
        "required" : [ "includeObjectsWithNoValueSet", "lowerBound", "operationType", "operator", "requiresTimeZoneConversion", "upperBound" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "upperBound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "requiresTimeZoneConversion" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "RANGED_DATE",
            "enum" : [ "RANGED_DATE" ]
          },
          "lowerBound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListSearchRequest" : {
        "type" : "object",
        "properties" : {
          "listIds" : {
            "type" : "array",
            "description" : "The `listIds` that will be used to filter results by `listId`. If values are provided, then the response will only include results that have a `listId` in this array.\n\nIf no value is provided, or if an empty list is provided, then the results will not be filtered by `listId`.",
            "items" : {
              "type" : "string"
            }
          },
          "offset" : {
            "type" : "integer",
            "description" : "Value used to paginate through lists. The `offset` provided in the response can be used in the next request to fetch the next page of results. Defaults to `0` if no offset is provided.",
            "format" : "int32"
          },
          "query" : {
            "type" : "string",
            "description" : "The `query` that will be used to search for lists by list name. If no `query` is provided, then the results will include all lists."
          },
          "count" : {
            "type" : "integer",
            "description" : "The number of lists to include in the response. Defaults to `20` if no value is provided. The max `count` is `500`.",
            "format" : "int32"
          },
          "processingTypes" : {
            "type" : "array",
            "description" : "The `processingTypes` that will be used to filter results by `processingType`. If values are provided, then the response will only include results that have a `processingType` in this array.\n\nIf no value is provided, or if an empty list is provided, then results will not be filtered by `processingType`.\n\nValid `processingTypes` are: `MANUAL`, `SNAPSHOT`, or `DYNAMIC`.",
            "items" : {
              "type" : "string"
            }
          },
          "additionalProperties" : {
            "type" : "array",
            "description" : "The property names of any additional list properties to include in the response. Properties that do not exist or that are empty for a particular list are not included in the response.\n\nBy default, all requests will fetch the following properties for each list: `hs_list_size`, `hs_last_record_added_at`, `hs_last_record_removed_at`, `hs_folder_name`, and `hs_list_reference_count`.",
            "items" : {
              "type" : "string"
            }
          },
          "sort" : {
            "type" : "string"
          }
        }
      },
      "ListSearchResponse" : {
        "required" : [ "hasMore", "lists", "offset", "total" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "description" : "The total number of lists that match the search criteria.",
            "format" : "int32"
          },
          "offset" : {
            "type" : "integer",
            "description" : "Value to be passed in a future request to paginate through list search results.",
            "format" : "int32"
          },
          "lists" : {
            "type" : "array",
            "description" : "The lists that matched the search criteria.",
            "items" : {
              "$ref" : "#/components/schemas/PublicObjectListSearchResult"
            }
          },
          "hasMore" : {
            "type" : "boolean",
            "description" : "Whether or not there are more results to page through."
          }
        }
      },
      "PublicInListFilter" : {
        "title" : "IN_LIST",
        "required" : [ "filterType", "listId", "operator" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string"
          },
          "metadata" : {
            "$ref" : "#/components/schemas/PublicInListFilterMetadata"
          },
          "filterType" : {
            "type" : "string",
            "default" : "IN_LIST",
            "enum" : [ "IN_LIST" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicSurveyMonkeyValueFilter" : {
        "title" : "SURVEY_MONKEY_VALUE",
        "required" : [ "filterType", "operator", "surveyId", "surveyQuestion", "valueComparison" ],
        "type" : "object",
        "properties" : {
          "valueComparison" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicBoolPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDateTimePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativePropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativeDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingDateRangePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingPropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicEnumerationPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicAllPropertyTypesOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicMultiStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicCalendarDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "surveyId" : {
            "type" : "string"
          },
          "surveyQuestion" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "SURVEY_MONKEY_VALUE",
            "enum" : [ "SURVEY_MONKEY_VALUE" ]
          },
          "surveyAnswerRowId" : {
            "type" : "string"
          },
          "surveyAnswerColId" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicRelativeComparativeTimestampRefineBy" : {
        "title" : "RELATIVE_COMPARATIVE",
        "required" : [ "comparison", "timeOffset", "type" ],
        "type" : "object",
        "properties" : {
          "comparison" : {
            "type" : "string"
          },
          "timeOffset" : {
            "$ref" : "#/components/schemas/PublicTimeOffset"
          },
          "type" : {
            "type" : "string",
            "default" : "RELATIVE_COMPARATIVE",
            "enum" : [ "RELATIVE_COMPARATIVE" ]
          }
        }
      },
      "ListsByIdResponse" : {
        "required" : [ "lists" ],
        "type" : "object",
        "properties" : {
          "lists" : {
            "type" : "array",
            "description" : "The object list definitions.",
            "items" : {
              "$ref" : "#/components/schemas/PublicObjectList"
            }
          }
        }
      },
      "PublicCommunicationSubscriptionFilter" : {
        "title" : "COMMUNICATION_SUBSCRIPTION",
        "required" : [ "acceptedOptStates", "channel", "filterType", "subscriptionIds", "subscriptionType" ],
        "type" : "object",
        "properties" : {
          "subscriptionType" : {
            "type" : "string"
          },
          "subscriptionIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "channel" : {
            "type" : "string"
          },
          "acceptedOptStates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filterType" : {
            "type" : "string",
            "default" : "COMMUNICATION_SUBSCRIPTION",
            "enum" : [ "COMMUNICATION_SUBSCRIPTION" ]
          },
          "businessUnitId" : {
            "type" : "string"
          }
        }
      },
      "PublicObjectListSearchResult" : {
        "required" : [ "additionalProperties", "listId", "listVersion", "name", "objectTypeId", "processingStatus", "processingType" ],
        "type" : "object",
        "properties" : {
          "processingType" : {
            "type" : "string",
            "description" : "The processing type of the list."
          },
          "objectTypeId" : {
            "type" : "string",
            "description" : "The object type of the list."
          },
          "updatedById" : {
            "type" : "string",
            "description" : "The ID of the user that last updated the list."
          },
          "filtersUpdatedAt" : {
            "type" : "string",
            "description" : "The time when the filters for this list were last updated.",
            "format" : "date-time"
          },
          "listId" : {
            "type" : "string",
            "description" : "The **ILS ID** of the list."
          },
          "createdAt" : {
            "type" : "string",
            "description" : "The time when the list was created.",
            "format" : "date-time"
          },
          "processingStatus" : {
            "type" : "string",
            "description" : "The processing status of the list."
          },
          "deletedAt" : {
            "type" : "string",
            "description" : "The time when the list was deleted.",
            "format" : "date-time"
          },
          "listVersion" : {
            "type" : "integer",
            "description" : "The version of the list.",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the list."
          },
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The name and value of any additional properties that exist for this list and that were included in the search request."
          },
          "createdById" : {
            "type" : "string",
            "description" : "The ID of the user that created the list."
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "The time the list was last updated.",
            "format" : "date-time"
          }
        }
      },
      "PublicRelativeRangedTimestampRefineBy" : {
        "title" : "RELATIVE_RANGED",
        "required" : [ "lowerBoundOffset", "rangeType", "type", "upperBoundOffset" ],
        "type" : "object",
        "properties" : {
          "upperBoundOffset" : {
            "$ref" : "#/components/schemas/PublicTimeOffset"
          },
          "rangeType" : {
            "type" : "string"
          },
          "lowerBoundOffset" : {
            "$ref" : "#/components/schemas/PublicTimeOffset"
          },
          "type" : {
            "type" : "string",
            "default" : "RELATIVE_RANGED",
            "enum" : [ "RELATIVE_RANGED" ]
          }
        }
      },
      "PublicIndexOffset" : {
        "type" : "object",
        "properties" : {
          "milliseconds" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int32"
          },
          "seconds" : {
            "type" : "integer",
            "format" : "int32"
          },
          "months" : {
            "type" : "integer",
            "format" : "int32"
          },
          "weeks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minutes" : {
            "type" : "integer",
            "format" : "int32"
          },
          "quarters" : {
            "type" : "integer",
            "format" : "int32"
          },
          "days" : {
            "type" : "integer",
            "format" : "int32"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicNotAllFilterBranch" : {
        "title" : "NOT_ALL",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "NOT_ALL",
            "enum" : [ "NOT_ALL" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          }
        }
      },
      "PublicBatchMigrationMapping" : {
        "required" : [ "legacyListIdsToIdsMapping", "missingLegacyListIds" ],
        "type" : "object",
        "properties" : {
          "legacyListIdsToIdsMapping" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicMigrationMapping"
            }
          },
          "missingLegacyListIds" : {
            "type" : "array",
            "description" : "A list of legacy list ids that were passed in but not found. It will be empty if no id's are missing",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PublicFormSubmissionFilter" : {
        "title" : "FORM_SUBMISSION",
        "required" : [ "filterType", "operator" ],
        "type" : "object",
        "properties" : {
          "formId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "FORM_SUBMISSION",
            "enum" : [ "FORM_SUBMISSION" ]
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "FILLED_OUT", "NOT_FILLED_OUT" ]
          }
        }
      },
      "PublicRollingDateRangePropertyOperation" : {
        "title" : "ROLLING_DATE_RANGE",
        "required" : [ "includeObjectsWithNoValueSet", "numberOfDays", "operationType", "operator", "requiresTimeZoneConversion" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "requiresTimeZoneConversion" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "ROLLING_DATE_RANGE",
            "enum" : [ "ROLLING_DATE_RANGE" ]
          },
          "numberOfDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ApiCollectionResponseJoinTimeAndRecordId" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/JoinTimeAndRecordId"
            }
          }
        }
      },
      "PublicAssociationFilterBranch" : {
        "title" : "ASSOCIATION",
        "required" : [ "associationCategory", "associationTypeId", "filterBranchOperator", "filterBranchType", "filterBranches", "filters", "objectTypeId", "operator" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "ASSOCIATION",
            "enum" : [ "ASSOCIATION" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "objectTypeId" : {
            "type" : "string"
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "associationTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "associationCategory" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicQuarterReference" : {
        "title" : "QUARTER",
        "required" : [ "day", "month", "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "QUARTER",
            "enum" : [ "QUARTER" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicEmailSubscriptionFilter" : {
        "title" : "EMAIL_SUBSCRIPTION",
        "required" : [ "acceptedStatuses", "filterType", "subscriptionIds" ],
        "type" : "object",
        "properties" : {
          "subscriptionType" : {
            "type" : "string"
          },
          "subscriptionIds" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "filterType" : {
            "type" : "string",
            "default" : "EMAIL_SUBSCRIPTION",
            "enum" : [ "EMAIL_SUBSCRIPTION" ]
          },
          "acceptedStatuses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PublicEnumerationPropertyOperation" : {
        "title" : "ENUMERATION",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "values" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "operationType" : {
            "type" : "string",
            "default" : "ENUMERATION",
            "enum" : [ "ENUMERATION" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListFolderCreateResponse" : {
        "required" : [ "folder" ],
        "type" : "object",
        "properties" : {
          "folder" : {
            "$ref" : "#/components/schemas/PublicListFolder"
          }
        }
      },
      "PublicTimePointOperation" : {
        "title" : "TIME_POINT",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "timePoint", "type" ],
        "type" : "object",
        "properties" : {
          "endpointBehavior" : {
            "type" : "string"
          },
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "propertyParser" : {
            "type" : "string"
          },
          "operationType" : {
            "type" : "string",
            "default" : "TIME_POINT",
            "enum" : [ "TIME_POINT" ]
          },
          "timePoint" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicDatePoint"
            }, {
              "$ref" : "#/components/schemas/PublicIndexedTimePoint"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyReferencedTime"
            } ]
          },
          "type" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListUpdateResponse" : {
        "type" : "object",
        "properties" : {
          "updatedList" : {
            "$ref" : "#/components/schemas/PublicObjectList"
          }
        }
      },
      "PublicAllHistoryRefineBy" : {
        "title" : "ALL_HISTORY",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "default" : "ALL_HISTORY",
            "enum" : [ "ALL_HISTORY" ]
          }
        }
      },
      "PublicNotAnyFilterBranch" : {
        "title" : "NOT_ANY",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "NOT_ANY",
            "enum" : [ "NOT_ANY" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          }
        }
      },
      "PublicIndexedTimePoint" : {
        "title" : "INDEXED",
        "required" : [ "indexReference", "timeType", "zoneId" ],
        "type" : "object",
        "properties" : {
          "offset" : {
            "$ref" : "#/components/schemas/PublicIndexOffset"
          },
          "timezoneSource" : {
            "type" : "string"
          },
          "indexReference" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNowReference"
            }, {
              "$ref" : "#/components/schemas/PublicTodayReference"
            }, {
              "$ref" : "#/components/schemas/PublicWeekReference"
            }, {
              "$ref" : "#/components/schemas/PublicFiscalQuarterReference"
            }, {
              "$ref" : "#/components/schemas/PublicFiscalYearReference"
            }, {
              "$ref" : "#/components/schemas/PublicYearReference"
            }, {
              "$ref" : "#/components/schemas/PublicQuarterReference"
            }, {
              "$ref" : "#/components/schemas/PublicMonthReference"
            } ]
          },
          "timeType" : {
            "type" : "string",
            "default" : "INDEXED",
            "enum" : [ "INDEXED" ]
          },
          "zoneId" : {
            "type" : "string"
          }
        }
      },
      "PublicRangedTimeOperation" : {
        "title" : "TIME_RANGED",
        "required" : [ "includeObjectsWithNoValueSet", "lowerBoundTimePoint", "operationType", "operator", "type", "upperBoundTimePoint" ],
        "type" : "object",
        "properties" : {
          "upperBoundEndpointBehavior" : {
            "type" : "string"
          },
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "upperBoundTimePoint" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicDatePoint"
            }, {
              "$ref" : "#/components/schemas/PublicIndexedTimePoint"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyReferencedTime"
            } ]
          },
          "propertyParser" : {
            "type" : "string"
          },
          "operationType" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "default" : "TIME_RANGED",
            "enum" : [ "TIME_RANGED" ]
          },
          "lowerBoundEndpointBehavior" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          },
          "lowerBoundTimePoint" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicDatePoint"
            }, {
              "$ref" : "#/components/schemas/PublicIndexedTimePoint"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyReferencedTime"
            } ]
          }
        }
      },
      "PublicWebinarFilter" : {
        "title" : "WEBINAR",
        "required" : [ "filterType", "operator" ],
        "type" : "object",
        "properties" : {
          "webinarId" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "WEBINAR",
            "enum" : [ "WEBINAR" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListCreateResponse" : {
        "required" : [ "list" ],
        "type" : "object",
        "properties" : {
          "list" : {
            "$ref" : "#/components/schemas/PublicObjectList"
          }
        }
      },
      "MembershipsUpdateResponse" : {
        "required" : [ "recordIdsMissing", "recordIdsRemoved", "recordsIdsAdded" ],
        "type" : "object",
        "properties" : {
          "recordIdsRemoved" : {
            "type" : "array",
            "description" : "The IDs of the records that were `removed` from the list.",
            "items" : {
              "type" : "string"
            }
          },
          "recordsIdsAdded" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "recordIdsMissing" : {
            "type" : "array",
            "description" : "The IDs of the records that were `missing` (e.g. did not exist in the portal) and so were not `added` or `removed`.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PublicUnifiedEventsFilterBranch" : {
        "title" : "UNIFIED_EVENTS",
        "required" : [ "eventTypeId", "filterBranchOperator", "filterBranchType", "filterBranches", "filters", "operator" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "UNIFIED_EVENTS",
            "enum" : [ "UNIFIED_EVENTS" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "eventTypeId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "HAS_COMPLETED", "HAS_NOT_COMPLETED" ]
          }
        }
      },
      "PublicNumOccurrencesRefineBy" : {
        "title" : "NUM_OCCURRENCES",
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "maxOccurrences" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "default" : "NUM_OCCURRENCES",
            "enum" : [ "NUM_OCCURRENCES" ]
          },
          "minOccurrences" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicObjectList" : {
        "required" : [ "listId", "listVersion", "name", "objectTypeId", "processingStatus", "processingType" ],
        "type" : "object",
        "properties" : {
          "processingType" : {
            "type" : "string",
            "description" : "The processing type of the list."
          },
          "objectTypeId" : {
            "type" : "string",
            "description" : "The object type of the list."
          },
          "updatedById" : {
            "type" : "string",
            "description" : "The ID of the user that last updated the list."
          },
          "filtersUpdatedAt" : {
            "type" : "string",
            "description" : "The time when the filters for this list were last updated.",
            "format" : "date-time"
          },
          "listId" : {
            "type" : "string",
            "description" : "The **ILS ID** of the list."
          },
          "createdAt" : {
            "type" : "string",
            "description" : "The time when the list was created.",
            "format" : "date-time"
          },
          "processingStatus" : {
            "type" : "string",
            "description" : "The processing status of the list."
          },
          "deletedAt" : {
            "type" : "string",
            "description" : "The time when the list was deleted.",
            "format" : "date-time"
          },
          "listVersion" : {
            "type" : "integer",
            "description" : "The version of the list.",
            "format" : "int32"
          },
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the list."
          },
          "createdById" : {
            "type" : "string",
            "description" : "The ID of the user that created the list."
          },
          "filterBranch" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicOrFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAndFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
            } ]
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "The time the list was last updated.",
            "format" : "date-time"
          }
        }
      },
      "RecordListMembership" : {
        "required" : [ "firstAddedTimestamp", "lastAddedTimestamp", "listId", "listVersion" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string"
          },
          "listVersion" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lastAddedTimestamp" : {
            "type" : "string",
            "format" : "date-time"
          },
          "firstAddedTimestamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "PublicCtaAnalyticsFilter" : {
        "title" : "CTA",
        "required" : [ "ctaName", "filterType", "operator" ],
        "type" : "object",
        "properties" : {
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "CTA",
            "enum" : [ "CTA" ]
          },
          "ctaName" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListFetchResponse" : {
        "required" : [ "list" ],
        "type" : "object",
        "properties" : {
          "list" : {
            "$ref" : "#/components/schemas/PublicObjectList"
          }
        }
      },
      "PublicConstantFilter" : {
        "title" : "CONSTANT",
        "required" : [ "filterType", "shouldAccept" ],
        "type" : "object",
        "properties" : {
          "shouldAccept" : {
            "type" : "boolean"
          },
          "source" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "CONSTANT",
            "enum" : [ "CONSTANT" ]
          }
        }
      },
      "PublicSetOccurrencesRefineBy" : {
        "title" : "SET_OCCURRENCES",
        "required" : [ "setType", "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "default" : "SET_OCCURRENCES",
            "enum" : [ "SET_OCCURRENCES" ]
          },
          "setType" : {
            "type" : "string"
          }
        }
      },
      "PublicListFolder" : {
        "required" : [ "childLists", "childNodes", "id", "parentFolderId" ],
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "description" : "The time the folder was created at.",
            "format" : "date-time"
          },
          "parentFolderId" : {
            "type" : "integer",
            "description" : "The Id of the folder this folder is in, the root folder is represented as 0.",
            "format" : "int32"
          },
          "childNodes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicListFolder"
            }
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the folder."
          },
          "id" : {
            "type" : "integer",
            "description" : "The Id of the folder.",
            "format" : "int32"
          },
          "childLists" : {
            "type" : "array",
            "description" : "An array of list Id's contained in this folder.",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "updatedContentsAt" : {
            "type" : "string",
            "description" : "The time that the contents of the folder was last updated at.",
            "format" : "date-time"
          },
          "userId" : {
            "type" : "integer",
            "description" : "The user Id of the owner of the folder.",
            "format" : "int32"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "The time the folder was last updated at.",
            "format" : "date-time"
          }
        }
      },
      "ApiCollectionResponseRecordListMembershipNoPaging" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecordListMembership"
            }
          }
        }
      },
      "PublicComparativeDatePropertyOperation" : {
        "title" : "COMPARATIVE_DATE",
        "required" : [ "comparisonPropertyName", "includeObjectsWithNoValueSet", "operationType", "operator" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "defaultComparisonValue" : {
            "type" : "string"
          },
          "operationType" : {
            "type" : "string",
            "default" : "COMPARATIVE_DATE",
            "enum" : [ "COMPARATIVE_DATE" ]
          },
          "comparisonPropertyName" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicRangedNumberPropertyOperation" : {
        "title" : "NUMBER_RANGED",
        "required" : [ "includeObjectsWithNoValueSet", "lowerBound", "operationType", "operator", "upperBound" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "upperBound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operationType" : {
            "type" : "string",
            "default" : "NUMBER_RANGED",
            "enum" : [ "NUMBER_RANGED" ]
          },
          "lowerBound" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicPageViewAnalyticsFilter" : {
        "title" : "PAGE_VIEW",
        "required" : [ "filterType", "operator", "pageUrl" ],
        "type" : "object",
        "properties" : {
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "enableTracking" : {
            "type" : "boolean"
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "pageUrl" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "PAGE_VIEW",
            "enum" : [ "PAGE_VIEW" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "MembershipChangeRequest" : {
        "required" : [ "recordIdsToAdd", "recordIdsToRemove" ],
        "type" : "object",
        "properties" : {
          "recordIdsToRemove" : {
            "type" : "array",
            "description" : "",
            "example" : [ 654 ],
            "items" : {
              "type" : "string"
            }
          },
          "recordIdsToAdd" : {
            "type" : "array",
            "description" : "",
            "example" : [ 123, 456, 789 ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PublicComparativePropertyUpdatedOperation" : {
        "title" : "COMPARATIVE_PROPERTY_UPDATED",
        "required" : [ "comparisonPropertyName", "includeObjectsWithNoValueSet", "operationType", "operator" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "defaultComparisonValue" : {
            "type" : "string"
          },
          "operationType" : {
            "type" : "string",
            "default" : "COMPARATIVE_PROPERTY_UPDATED",
            "enum" : [ "COMPARATIVE_PROPERTY_UPDATED" ]
          },
          "comparisonPropertyName" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PreviousPage" : {
        "required" : [ "before" ],
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "description" : "The offset of the previous page of records."
          },
          "link" : {
            "type" : "string",
            "description" : "A direct link to the request for the previous page of records."
          }
        }
      },
      "PublicAndFilterBranch" : {
        "title" : "AND",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "AND",
            "enum" : [ "AND" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          }
        }
      },
      "PublicIntegrationEventFilter" : {
        "title" : "INTEGRATION_EVENT",
        "required" : [ "eventTypeId", "filterLines", "filterType" ],
        "type" : "object",
        "properties" : {
          "eventTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "filterLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicEventFilterMetadata"
            }
          },
          "filterType" : {
            "type" : "string",
            "default" : "INTEGRATION_EVENT",
            "enum" : [ "INTEGRATION_EVENT" ]
          }
        }
      },
      "PublicAbsoluteComparativeTimestampRefineBy" : {
        "title" : "ABSOLUTE_COMPARATIVE",
        "required" : [ "comparison", "timestamp", "type" ],
        "type" : "object",
        "properties" : {
          "comparison" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "default" : "ABSOLUTE_COMPARATIVE",
            "enum" : [ "ABSOLUTE_COMPARATIVE" ]
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PublicSurveyMonkeyFilter" : {
        "title" : "SURVEY_MONKEY",
        "required" : [ "filterType", "operator", "surveyId" ],
        "type" : "object",
        "properties" : {
          "surveyId" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "SURVEY_MONKEY",
            "enum" : [ "SURVEY_MONKEY" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicAbsoluteRangedTimestampRefineBy" : {
        "title" : "ABSOLUTE_RANGED",
        "required" : [ "lowerTimestamp", "rangeType", "type", "upperTimestamp" ],
        "type" : "object",
        "properties" : {
          "rangeType" : {
            "type" : "string"
          },
          "upperTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lowerTimestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "type" : "string",
            "default" : "ABSOLUTE_RANGED",
            "enum" : [ "ABSOLUTE_RANGED" ]
          }
        }
      },
      "PublicDatePropertyOperation" : {
        "title" : "DATE",
        "required" : [ "day", "includeObjectsWithNoValueSet", "month", "operationType", "operator", "year" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "month" : {
            "type" : "string"
          },
          "year" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operationType" : {
            "type" : "string",
            "default" : "DATE",
            "enum" : [ "DATE" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicEventAnalyticsFilter" : {
        "title" : "EVENT",
        "required" : [ "eventId", "filterType", "operator" ],
        "type" : "object",
        "properties" : {
          "eventId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "EVENT",
            "enum" : [ "EVENT" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicUnifiedEventsFilter" : {
        "title" : "UNIFIED_EVENTS",
        "required" : [ "filterLines", "filterType" ],
        "type" : "object",
        "properties" : {
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "eventTypeId" : {
            "type" : "string"
          },
          "filterLines" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PublicEventFilterMetadata"
            }
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "UNIFIED_EVENTS",
            "enum" : [ "UNIFIED_EVENTS" ]
          }
        }
      },
      "PublicFiscalYearReference" : {
        "title" : "FISCAL_YEAR",
        "required" : [ "day", "month", "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "FISCAL_YEAR",
            "enum" : [ "FISCAL_YEAR" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicCalendarDatePropertyOperation" : {
        "title" : "CALENDAR_DATE",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "timeUnit" ],
        "type" : "object",
        "properties" : {
          "useFiscalYear" : {
            "type" : "boolean"
          },
          "fiscalYearStart" : {
            "type" : "string",
            "enum" : [ "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER" ]
          },
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "CALENDAR_DATE",
            "enum" : [ "CALENDAR_DATE" ]
          },
          "timeUnitCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          },
          "timeUnit" : {
            "type" : "string"
          }
        }
      },
      "PublicPropertyFilter" : {
        "title" : "PROPERTY",
        "required" : [ "filterType", "operation", "property" ],
        "type" : "object",
        "properties" : {
          "property" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "PROPERTY",
            "enum" : [ "PROPERTY" ]
          },
          "operation" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicBoolPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDateTimePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativePropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativeDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingDateRangePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingPropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicEnumerationPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicAllPropertyTypesOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicMultiStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicCalendarDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          }
        }
      },
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          }
        }
      },
      "PublicNumAssociationsFilter" : {
        "title" : "NUM_ASSOCIATIONS",
        "required" : [ "associationCategory", "associationTypeId", "coalescingRefineBy", "filterType" ],
        "type" : "object",
        "properties" : {
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "associationTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "associationCategory" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "NUM_ASSOCIATIONS",
            "enum" : [ "NUM_ASSOCIATIONS" ]
          }
        }
      },
      "PublicAssociationInListFilter" : {
        "title" : "ASSOCIATION",
        "required" : [ "associationCategory", "associationTypeId", "coalescingRefineBy", "filterType", "listId", "operator" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "toObjectType" : {
            "type" : "string"
          },
          "associationTypeId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "associationCategory" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "ASSOCIATION",
            "enum" : [ "ASSOCIATION" ]
          },
          "toObjectTypeId" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicEmailEventFilter" : {
        "title" : "EMAIL_EVENT",
        "required" : [ "appId", "emailId", "filterType", "level", "operator" ],
        "type" : "object",
        "properties" : {
          "clickUrl" : {
            "type" : "string"
          },
          "level" : {
            "type" : "string"
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "appId" : {
            "type" : "string"
          },
          "emailId" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "EMAIL_EVENT",
            "enum" : [ "EMAIL_EVENT" ]
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "LINK_CLICKED", "MARKED_SPAM", "OPENED", "OPENED_BUT_LINK_NOT_CLICKED", "OPENED_BUT_NOT_REPLIED", "REPLIED", "UNSUBSCRIBED", "BOUNCED", "RECEIVED", "RECEIVED_BUT_NOT_OPENED", "SENT", "SENT_BUT_LINK_NOT_CLICKED", "SENT_BUT_NOT_RECEIVED" ]
          }
        }
      },
      "PublicOrFilterBranch" : {
        "title" : "OR",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "OR",
            "enum" : [ "OR" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          }
        }
      },
      "PublicAdsTimeFilter" : {
        "title" : "ADS_TIME",
        "required" : [ "filterType", "pruningRefineBy" ],
        "type" : "object",
        "properties" : {
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "ADS_TIME",
            "enum" : [ "ADS_TIME" ]
          }
        }
      },
      "PublicFormSubmissionOnPageFilter" : {
        "title" : "FORM_SUBMISSION_ON_PAGE",
        "required" : [ "filterType", "operator", "pageId" ],
        "type" : "object",
        "properties" : {
          "formId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "pruningRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "filterType" : {
            "type" : "string",
            "default" : "FORM_SUBMISSION_ON_PAGE",
            "enum" : [ "FORM_SUBMISSION_ON_PAGE" ]
          },
          "pageId" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string",
            "enum" : [ "FILLED_OUT", "NOT_FILLED_OUT" ]
          }
        }
      },
      "PublicPropertyAssociationInListFilter" : {
        "title" : "PROPERTY_ASSOCIATION",
        "required" : [ "coalescingRefineBy", "filterType", "listId", "operator", "propertyWithObjectId" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string"
          },
          "coalescingRefineBy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicNumOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicSetOccurrencesRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicRelativeRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteComparativeTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAbsoluteRangedTimestampRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicAllHistoryRefineBy"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          },
          "propertyWithObjectId" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "PROPERTY_ASSOCIATION",
            "enum" : [ "PROPERTY_ASSOCIATION" ]
          },
          "toObjectTypeId" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicStringPropertyOperation" : {
        "title" : "STRING",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "STRING",
            "enum" : [ "STRING" ]
          },
          "value" : {
            "type" : "string"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicPropertyReferencedTime" : {
        "title" : "PROPERTY_REFERENCED",
        "required" : [ "property", "referenceType", "timeType", "zoneId" ],
        "type" : "object",
        "properties" : {
          "timezoneSource" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "timeType" : {
            "type" : "string",
            "default" : "PROPERTY_REFERENCED",
            "enum" : [ "PROPERTY_REFERENCED" ]
          },
          "zoneId" : {
            "type" : "string"
          },
          "referenceType" : {
            "type" : "string"
          }
        }
      },
      "Paging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          },
          "prev" : {
            "$ref" : "#/components/schemas/PreviousPage"
          }
        }
      },
      "PublicPrivacyAnalyticsFilter" : {
        "title" : "PRIVACY",
        "required" : [ "filterType", "operator", "privacyName" ],
        "type" : "object",
        "properties" : {
          "privacyName" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "PRIVACY",
            "enum" : [ "PRIVACY" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "ListFilterUpdateRequest" : {
        "required" : [ "filterBranch" ],
        "type" : "object",
        "properties" : {
          "filterBranch" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicOrFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAndFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
            } ]
          }
        }
      },
      "PublicMultiStringPropertyOperation" : {
        "title" : "MULTISTRING",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "values" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "operationType" : {
            "type" : "string",
            "default" : "MULTISTRING",
            "enum" : [ "MULTISTRING" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicWeekReference" : {
        "title" : "WEEK",
        "required" : [ "dayOfWeek", "referenceType" ],
        "type" : "object",
        "properties" : {
          "dayOfWeek" : {
            "type" : "string",
            "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
          },
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "WEEK",
            "enum" : [ "WEEK" ]
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicAdsSearchFilter" : {
        "title" : "ADS_SEARCH",
        "required" : [ "adNetwork", "entityType", "filterType", "operator", "searchTermType", "searchTerms" ],
        "type" : "object",
        "properties" : {
          "searchTerms" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "entityType" : {
            "type" : "string"
          },
          "adNetwork" : {
            "type" : "string"
          },
          "searchTermType" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "ADS_SEARCH",
            "enum" : [ "ADS_SEARCH" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicTodayReference" : {
        "title" : "TODAY",
        "required" : [ "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "TODAY",
            "enum" : [ "TODAY" ]
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicNowReference" : {
        "title" : "NOW",
        "required" : [ "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "NOW",
            "enum" : [ "NOW" ]
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ListFolderCreateRequest" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "parentFolderId" : {
            "type" : "string",
            "description" : "The folder this should be created in, if not specified will be created in the root folder 0."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the folder to be created."
          }
        }
      },
      "JoinTimeAndRecordId" : {
        "required" : [ "membershipTimestamp", "recordId" ],
        "type" : "object",
        "properties" : {
          "recordId" : {
            "type" : "string"
          },
          "membershipTimestamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "PublicRestrictedFilterBranch" : {
        "title" : "RESTRICTED",
        "required" : [ "filterBranchOperator", "filterBranchType", "filterBranches", "filters" ],
        "type" : "object",
        "properties" : {
          "filterBranchType" : {
            "type" : "string",
            "default" : "RESTRICTED",
            "enum" : [ "RESTRICTED" ]
          },
          "filterBranches" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicOrFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAndFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
              } ]
            }
          },
          "filterBranchOperator" : {
            "type" : "string"
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/PublicPropertyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPageViewAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCtaAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEventAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicFormSubmissionOnPageFilter"
              }, {
                "$ref" : "#/components/schemas/PublicIntegrationEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCommunicationSubscriptionFilter"
              }, {
                "$ref" : "#/components/schemas/PublicCampaignInfluencedFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyFilter"
              }, {
                "$ref" : "#/components/schemas/PublicSurveyMonkeyValueFilter"
              }, {
                "$ref" : "#/components/schemas/PublicWebinarFilter"
              }, {
                "$ref" : "#/components/schemas/PublicEmailEventFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPrivacyAnalyticsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsSearchFilter"
              }, {
                "$ref" : "#/components/schemas/PublicAdsTimeFilter"
              }, {
                "$ref" : "#/components/schemas/PublicInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicNumAssociationsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicUnifiedEventsFilter"
              }, {
                "$ref" : "#/components/schemas/PublicPropertyAssociationInListFilter"
              }, {
                "$ref" : "#/components/schemas/PublicConstantFilter"
              } ]
            }
          }
        }
      },
      "PublicMonthReference" : {
        "title" : "MONTH",
        "required" : [ "day", "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "MONTH",
            "enum" : [ "MONTH" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicDateTimePropertyOperation" : {
        "title" : "DATETIME",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "requiresTimeZoneConversion", "timestamp" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "requiresTimeZoneConversion" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "DATETIME",
            "enum" : [ "DATETIME" ]
          },
          "operator" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicCampaignInfluencedFilter" : {
        "title" : "CAMPAIGN_INFLUENCED",
        "required" : [ "campaignId", "filterType" ],
        "type" : "object",
        "properties" : {
          "campaignId" : {
            "type" : "string"
          },
          "filterType" : {
            "type" : "string",
            "default" : "CAMPAIGN_INFLUENCED",
            "enum" : [ "CAMPAIGN_INFLUENCED" ]
          }
        }
      },
      "ListMoveRequest" : {
        "required" : [ "listId", "newFolderId" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string",
            "description" : "The Id of the list to move."
          },
          "newFolderId" : {
            "type" : "string",
            "description" : "The Id of folder to move the list to, the root folder is Id 0."
          }
        }
      },
      "PublicFiscalQuarterReference" : {
        "title" : "FISCAL_QUARTER",
        "required" : [ "day", "month", "referenceType" ],
        "type" : "object",
        "properties" : {
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "referenceType" : {
            "type" : "string",
            "default" : "FISCAL_QUARTER",
            "enum" : [ "FISCAL_QUARTER" ]
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ],
              "invalidPropertyName" : [ "propertyValue" ]
            }
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps",
            "example" : {
              "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "Invalid input (details will vary based on the error)"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category",
            "example" : "VALIDATION_ERROR"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "PublicMigrationMapping" : {
        "required" : [ "legacyListId", "listId" ],
        "type" : "object",
        "properties" : {
          "listId" : {
            "type" : "string",
            "description" : "The V3 list id for the list"
          },
          "legacyListId" : {
            "type" : "string",
            "description" : "The legacy list id for the list"
          }
        }
      },
      "ListCreateRequest" : {
        "required" : [ "name", "objectTypeId", "processingType" ],
        "type" : "object",
        "properties" : {
          "objectTypeId" : {
            "type" : "string",
            "description" : "The object type ID of the type of objects that the list will store."
          },
          "processingType" : {
            "type" : "string",
            "description" : "The processing type of the list. One of: `SNAPSHOT`, `MANUAL`, or `DYNAMIC`."
          },
          "customProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The list of custom properties to tie to the list. Custom property name is the key, the value is the value."
          },
          "listFolderId" : {
            "type" : "integer",
            "description" : "The ID of the folder that the list should be created in. If left blank, then the list will be created in the root of the list folder structure.",
            "format" : "int32"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the list, which must be globally unique across all public lists in the portal."
          },
          "filterBranch" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicOrFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAndFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAllFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicNotAnyFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicRestrictedFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicUnifiedEventsFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicPropertyAssociationFilterBranch"
            }, {
              "$ref" : "#/components/schemas/PublicAssociationFilterBranch"
            } ]
          }
        }
      },
      "PublicBoolPropertyOperation" : {
        "title" : "BOOL",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator", "value" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "BOOL",
            "enum" : [ "BOOL" ]
          },
          "value" : {
            "type" : "boolean"
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicAllPropertyTypesOperation" : {
        "title" : "ALL_PROPERTY",
        "required" : [ "includeObjectsWithNoValueSet", "operationType", "operator" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "ALL_PROPERTY",
            "enum" : [ "ALL_PROPERTY" ]
          },
          "operator" : {
            "type" : "string"
          }
        }
      },
      "PublicEventFilterMetadata" : {
        "required" : [ "operation", "property" ],
        "type" : "object",
        "properties" : {
          "property" : {
            "type" : "string"
          },
          "operation" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/PublicBoolPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDateTimePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativePropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicComparativeDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingDateRangePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRollingPropertyUpdatedOperation"
            }, {
              "$ref" : "#/components/schemas/PublicEnumerationPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicAllPropertyTypesOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedNumberPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicMultiStringPropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicCalendarDatePropertyOperation"
            }, {
              "$ref" : "#/components/schemas/PublicTimePointOperation"
            }, {
              "$ref" : "#/components/schemas/PublicRangedTimeOperation"
            } ]
          }
        }
      },
      "PublicDatePoint" : {
        "title" : "DATE",
        "required" : [ "day", "month", "timeType", "year", "zoneId" ],
        "type" : "object",
        "properties" : {
          "month" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hour" : {
            "type" : "integer",
            "format" : "int32"
          },
          "year" : {
            "type" : "integer",
            "format" : "int32"
          },
          "timezoneSource" : {
            "type" : "string"
          },
          "millisecond" : {
            "type" : "integer",
            "format" : "int32"
          },
          "timeType" : {
            "type" : "string",
            "default" : "DATE",
            "enum" : [ "DATE" ]
          },
          "zoneId" : {
            "type" : "string"
          },
          "day" : {
            "type" : "integer",
            "format" : "int32"
          },
          "minute" : {
            "type" : "integer",
            "format" : "int32"
          },
          "second" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "PublicTimeOffset" : {
        "required" : [ "amount", "offsetDirection", "timeUnit" ],
        "type" : "object",
        "properties" : {
          "amount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offsetDirection" : {
            "type" : "string"
          },
          "timeUnit" : {
            "type" : "string"
          }
        }
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "description" : "A direct link to the request for the next page of records."
          },
          "after" : {
            "type" : "string",
            "description" : "The offset for the next page of records."
          }
        }
      },
      "PublicRollingPropertyUpdatedOperation" : {
        "title" : "ROLLING_PROPERTY_UPDATED",
        "required" : [ "includeObjectsWithNoValueSet", "numberOfDays", "operationType", "operator" ],
        "type" : "object",
        "properties" : {
          "includeObjectsWithNoValueSet" : {
            "type" : "boolean"
          },
          "operationType" : {
            "type" : "string",
            "default" : "ROLLING_PROPERTY_UPDATED",
            "enum" : [ "ROLLING_PROPERTY_UPDATED" ]
          },
          "numberOfDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "operator" : {
            "type" : "string"
          }
        }
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "crm.lists.read" : " ",
              "cms.membership.access_groups.write" : "Write membership access groups.",
              "crm.lists.write" : " "
            }
          }
        }
      },
      "private_apps" : {
        "type" : "apiKey",
        "name" : "private-app",
        "in" : "header"
      }
    }
  },
  "x-hubspot-available-client-libraries" : [ "PHP", "Node", "Ruby", "Python" ],
  "x-hubspot-product-tier-requirements" : {
    "marketing" : "STARTER",
    "cms" : "STARTER"
  },
  "x-hubspot-documentation-banner" : "NONE"
}