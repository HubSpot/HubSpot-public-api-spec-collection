{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Files",
    "description" : "Upload and manage files.",
    "version" : "v3",
    "x-hubspot-product-tier-requirements" : {
      "marketing" : "FREE",
      "sales" : "FREE",
      "service" : "FREE",
      "cms" : "STARTER"
    },
    "x-hubspot-api-use-case" : "When launching a company rebrand, upload a new set of branded images and assets to the file manager so that marketing and sales teams can update their assets accordingly.",
    "x-hubspot-related-documentation" : [ {
      "name" : "Files Guide",
      "url" : "https://developers.hubspot.com/docs/guides/api/library/files"
    } ],
    "x-hubspot-introduction" : "Use the files API to manage and store files in HubSpot's file manager tool. Files can be used throughout other HubSpot tools, such as inserting image files into emails."
  },
  "servers" : [ {
    "url" : "https://api.hubapi.com"
  } ],
  "tags" : [ {
    "name" : "Files"
  }, {
    "name" : "Folders"
  } ],
  "paths" : {
    "/files/v3/files/{fileId}/gdpr-delete" : {
      "delete" : {
        "tags" : [ "Files" ],
        "summary" : "GDPR-delete file",
        "description" : "Delete a file in accordance with GDPR regulations.",
        "operationId" : "delete-/files/v3/files/{fileId}/gdpr-delete_delete",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "ID of file to GDPR delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/{fileId}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Retrieve file by ID",
        "description" : "Retrieve a file by its ID.",
        "operationId" : "get-/files/v3/files/{fileId}_getById",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "ID of the desired file.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "null",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "put" : {
        "tags" : [ "Files" ],
        "summary" : "Replace file",
        "description" : "Replace existing file data with new file data. Can be used to change image content without having to upload a new file and update all references.",
        "operationId" : "put-/files/v3/files/{fileId}_replace",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "ID of the desired file.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File data that will replace existing file in the file manager.",
                    "format" : "binary"
                  },
                  "charsetHunch" : {
                    "type" : "string",
                    "description" : "Character set of given file data."
                  },
                  "options" : {
                    "type" : "string",
                    "description" : "JSON string representing FileReplaceOptions. Includes options to set the access and expiresAt properties, which will automatically update when the file is replaced."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Files" ],
        "summary" : "Delete file by ID",
        "description" : "Delete a file by ID",
        "operationId" : "delete-/files/v3/files/{fileId}_archive",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "FileId to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "patch" : {
        "tags" : [ "Files" ],
        "summary" : "Update file properties",
        "description" : "Update properties of file by ID.",
        "operationId" : "patch-/files/v3/files/{fileId}_updateProperties",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "ID of file to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FileUpdateInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders/{folderId}" : {
      "get" : {
        "tags" : [ "Folders" ],
        "summary" : "Retrieve folder by ID",
        "description" : "Retrieve a folder by its ID.",
        "operationId" : "get-/files/v3/folders/{folderId}_getById",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "ID of desired folder",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "Properties to set on returned folder.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Folder"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Folders" ],
        "summary" : "Delete folder by ID",
        "description" : "Delete folder by ID.",
        "operationId" : "delete-/files/v3/folders/{folderId}_archive",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "ID of folder to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "patch" : {
        "tags" : [ "Folders" ],
        "summary" : "Update folder properties by folder ID",
        "description" : "Update a folder's properties, identified by folder ID.",
        "operationId" : "patch-/files/v3/folders/{folderId}_updateProperties",
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "ID of folder to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FolderUpdateInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Folder"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "Upload file",
        "description" : "Upload a single file with content specified in request body.",
        "operationId" : "post-/files/v3/files_upload",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "file" : {
                    "type" : "string",
                    "description" : "File to be uploaded.",
                    "format" : "binary"
                  },
                  "folderId" : {
                    "type" : "string",
                    "description" : "Either 'folderId' or 'folderPath' is required. folderId is the ID of the folder the file will be uploaded to."
                  },
                  "folderPath" : {
                    "type" : "string",
                    "description" : "Either 'folderPath' or 'folderId' is required. This field represents the destination folder path for the uploaded file. If a path doesn't exist, the system will try to create one."
                  },
                  "fileName" : {
                    "type" : "string",
                    "description" : "Desired name for the uploaded file."
                  },
                  "charsetHunch" : {
                    "type" : "string",
                    "description" : "Character set of the uploaded file."
                  },
                  "options" : {
                    "type" : "string",
                    "description" : "JSON string representing FileUploadOptions."
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/File"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders" : {
      "post" : {
        "tags" : [ "Folders" ],
        "summary" : "Create folder",
        "description" : "Creates a folder.",
        "operationId" : "post-/files/v3/folders_create",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Folder creation options",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FolderInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Folder"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/{fileId}/signed-url" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Get signed URL to access private file",
        "description" : "Generates signed URL that allows temporary access to a private file.",
        "operationId" : "get-/files/v3/files/{fileId}/signed-url_getSignedUrl",
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "ID of file.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : "\\d+",
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "For image files. This will resize the image to the desired size before sharing. Does not affect the original file, just the file served by this signed URL.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "thumb", "icon", "medium", "preview" ]
          }
        }, {
          "name" : "expirationSeconds",
          "in" : "query",
          "description" : "How long in seconds the link will provide access to the file.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "upscale",
          "in" : "query",
          "description" : "If size is provided, this will upscale the image to fit the size dimensions.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignedUrl"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/import-from-url/async" : {
      "post" : {
        "tags" : [ "Files" ],
        "summary" : "Import file from URL",
        "description" : "Asynchronously imports the file at the given URL into the file manager.",
        "operationId" : "post-/files/v3/files/import-from-url/async_importFromUrl",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImportFromUrlInput"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ImportFromUrlTaskLocator"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/stat/{path}" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Retrieve file by path",
        "description" : "Retrieve a file by its path.",
        "operationId" : "get-/files/v3/files/stat/{path}_getMetadata",
        "parameters" : [ {
          "name" : "path",
          "in" : "path",
          "description" : "The path of the file. ",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : ".+",
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "Properties to return in the response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileStat"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders/search" : {
      "get" : {
        "tags" : [ "Folders" ],
        "summary" : "Search folders",
        "description" : "Search for folders. Does not contain hidden or archived folders.",
        "operationId" : "get-/files/v3/folders/search_doSearch",
        "parameters" : [ {
          "name" : "properties",
          "in" : "query",
          "description" : "Properties that should be included in the returned folders.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Offset search results by this value. The default offset is 0 and the maximum offset of items for a given search is 10,000. Narrow your search down if you are reaching this limit.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of items to return. Default limit is 10, maximum limit is 100.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort results by given property. For example -name sorts by name field descending, name sorts by name field ascending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "idLte",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "idGte",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "Search folders by exact time of creation. Time must be epoch time in milliseconds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAtLte",
          "in" : "query",
          "description" : "Search folders by less than or equal to time of creation. Can be used with createdAtGte to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAtGte",
          "in" : "query",
          "description" : "Search folders by greater than or equal to time of creation. Can be used with createdAtLte to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "Search folders by exact time of latest updated. Time must be epoch time in milliseconds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAtLte",
          "in" : "query",
          "description" : "Search folders by less than or equal to time of latest update. Can be used with updatedAtGte to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAtGte",
          "in" : "query",
          "description" : "Search folders by greater than or equal to time of latest update. Can be used with updatedAtLte to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for folders containing the specified name.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Search folders by path.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentFolderIds",
          "in" : "query",
          "description" : "Search folders with the given parent folderId.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseFolder"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders/update/async/tasks/{taskId}/status" : {
      "get" : {
        "tags" : [ "Folders" ],
        "summary" : "Check folder update status",
        "description" : "Check status of folder update. Folder updates happen asynchronously.",
        "operationId" : "get-/files/v3/folders/update/async/tasks/{taskId}/status_checkUpdateStatus",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "The ID of the folder update task.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderActionResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/search" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Search files",
        "description" : "Search through files in the file manager. Does not display hidden or archived files.",
        "operationId" : "get-/files/v3/files/search_doSearch",
        "parameters" : [ {
          "name" : "properties",
          "in" : "query",
          "description" : "A list of file properties to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "Offset search results by this value. The default offset is 0 and the maximum offset of items for a given search is 10,000. Narrow your search down if you are reaching this limit.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "before",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Number of items to return. Default limit is 10, maximum limit is 100.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort files by a given field.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "Search by a list of file IDs.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "idLte",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "idGte",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "createdAt",
          "in" : "query",
          "description" : "Search files by time of creation.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAtLte",
          "in" : "query",
          "description" : "Search files by less than or equal to time of creation. Can be used with `createdAtGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAtGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to time of creation. Can be used with `createdAtLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "Search files by time of latest updated.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAtLte",
          "in" : "query",
          "description" : "Search files by less than or equal to time of latest update. Can be used with `updatedAtGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAtGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to time of latest update. Can be used with `updatedAtLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Search for files containing the given name.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Search files by path.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentFolderIds",
          "in" : "query",
          "description" : "Search files within given `folderId`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "Search files by exact file size in bytes.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sizeLte",
          "in" : "query",
          "description" : "Search files by less than or equal to file size. Can be used with `sizeGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "sizeGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to file size. Can be used with `sizeLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "Search files by height of image or video.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "heightLte",
          "in" : "query",
          "description" : "Search files by less than or equal to height of image or video. Can be used with `heightGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "heightGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to height of image or video. Can be used with `heightLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "width",
          "in" : "query",
          "description" : "Search files by width of image or video.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "widthLte",
          "in" : "query",
          "description" : "Search files by less than or equal to width of image or video. Can be used with `widthGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "widthGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to width of image or video. Can be used with `widthLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "encoding",
          "in" : "query",
          "description" : "Search files by specified encoding.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by provided file type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "extension",
          "in" : "query",
          "description" : "Search files by given extension.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "url",
          "in" : "query",
          "description" : "Search by file URL.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isUsableInContent",
          "in" : "query",
          "description" : "If `true`, shows files that have been marked to be used in new content. If `false`, shows files that should not be used in new content.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "allowsAnonymousAccess",
          "in" : "query",
          "description" : "Search files by access. If `true`, will show only public files. If `false`, will show only private files.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "fileMd5",
          "in" : "query",
          "description" : "Search files by a specific md5 hash.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expiresAt",
          "in" : "query",
          "description" : "Search files by exact expires time. Time must be epoch time in milliseconds.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "expiresAtLte",
          "in" : "query",
          "description" : "Search files by less than or equal to expires time. Can be used with `expiresAtGte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "expiresAtGte",
          "in" : "query",
          "description" : "Search files by greater than or equal to expires time. Can be used with `expiresAtLte` to create a range.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseFile"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders/{folderPath}" : {
      "get" : {
        "tags" : [ "Folders" ],
        "summary" : "Retrieve folder by path",
        "description" : "Retrieve a folder, identified by its path.",
        "operationId" : "get-/files/v3/folders/{folderPath}_getByPath",
        "parameters" : [ {
          "name" : "folderPath",
          "in" : "path",
          "description" : "Path of desired folder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : ".+",
            "type" : "string"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "Properties to set on returned folder.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Folder"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      },
      "delete" : {
        "tags" : [ "Folders" ],
        "summary" : "Delete folder by path",
        "description" : "Delete a folder, identified by its path.",
        "operationId" : "delete-/files/v3/folders/{folderPath}_archiveByPath",
        "parameters" : [ {
          "name" : "folderPath",
          "in" : "path",
          "description" : "Path of folder to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "pattern" : ".+",
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/folders/update/async" : {
      "post" : {
        "tags" : [ "Folders" ],
        "summary" : "Update folder properties",
        "description" : "Update properties of folder by given ID. This action happens asynchronously and will update all of the folder's children as well.",
        "operationId" : "post-/files/v3/folders/update/async_updatePropertiesRecursively",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FolderUpdateInputWithId"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderUpdateTaskLocator"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    },
    "/files/v3/files/import-from-url/async/tasks/{taskId}/status" : {
      "get" : {
        "tags" : [ "Files" ],
        "summary" : "Check import status",
        "description" : "Check the status of requested import.",
        "operationId" : "get-/files/v3/files/import-from-url/async/tasks/{taskId}/status_checkImport",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "Import by URL task ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileActionResponse"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "private_apps" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files.ui_hidden.read" ]
        }, {
          "oauth2" : [ "files" ]
        }, {
          "private_apps" : [ "files" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "StandardError" : {
        "required" : [ "category", "context", "errors", "links", "message", "status" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "object",
            "properties" : { }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "status" : {
            "type" : "string"
          }
        }
      },
      "FolderUpdateInput" : {
        "type" : "object",
        "properties" : {
          "parentFolderId" : {
            "type" : "integer",
            "description" : "New parent folderId. If changed, the folder and all it's children will be moved into the specified folder. parentFolderId and parentFolderPath cannot be specified at the same time.",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "New name. If specified the folder's name and fullPath will change. All children of the folder will be updated accordingly."
          }
        },
        "description" : "Object for updating folders."
      },
      "FolderActionResponse" : {
        "required" : [ "completedAt", "startedAt", "status", "taskId" ],
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/Folder"
          },
          "completedAt" : {
            "type" : "string",
            "description" : "When the requested changes have been completed.",
            "format" : "date-time"
          },
          "numErrors" : {
            "type" : "integer",
            "description" : "Number of errors resulting from the requested changes.",
            "format" : "int32"
          },
          "requestedAt" : {
            "type" : "string",
            "description" : "Timestamp representing when the task was requested.",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "description" : "Timestamp representing when the task was started at.",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Link to check the status of the task."
          },
          "errors" : {
            "type" : "array",
            "description" : "Detailed errors resulting from the task.",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "taskId" : {
            "type" : "string",
            "description" : "ID of the task."
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the task.",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "Paging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          },
          "prev" : {
            "$ref" : "#/components/schemas/PreviousPage"
          }
        }
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ],
              "invalidPropertyName" : [ "propertyValue" ]
            }
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps",
            "example" : {
              "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "Invalid input (details will vary based on the error)"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category",
            "example" : "VALIDATION_ERROR"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "Folder" : {
        "required" : [ "archived", "createdAt", "id", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "type" : "string",
            "description" : "Timestamp of folder creation.",
            "format" : "date-time"
          },
          "archivedAt" : {
            "type" : "string",
            "description" : "Timestamp of folder deletion.",
            "format" : "date-time"
          },
          "path" : {
            "type" : "string",
            "description" : "Path of the folder in the file manager."
          },
          "archived" : {
            "type" : "boolean",
            "description" : "Marks whether the folder is deleted or not."
          },
          "parentFolderId" : {
            "type" : "string",
            "description" : "ID of the parent folder."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the folder."
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the folder."
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the latest update to the folder.",
            "format" : "date-time"
          }
        }
      },
      "CollectionResponseFile" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          },
          "results" : {
            "type" : "array",
            "description" : "",
            "items" : {
              "$ref" : "#/components/schemas/File"
            }
          }
        },
        "description" : "Collections of files"
      },
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          }
        }
      },
      "FileActionResponse" : {
        "required" : [ "completedAt", "startedAt", "status", "taskId" ],
        "type" : "object",
        "properties" : {
          "result" : {
            "$ref" : "#/components/schemas/File"
          },
          "completedAt" : {
            "type" : "string",
            "description" : "Time of completion of task.",
            "format" : "date-time"
          },
          "numErrors" : {
            "type" : "integer",
            "description" : "Number of errors resulting from the task.",
            "format" : "int32"
          },
          "requestedAt" : {
            "type" : "string",
            "description" : "Timestamp of when the task was requested.",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "description" : "Timestamp of when the task was started.",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Link to check the status of the requested task."
          },
          "errors" : {
            "type" : "array",
            "description" : "Descriptive error messages.",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "taskId" : {
            "type" : "string",
            "description" : "ID of the requested task."
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the task.",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          }
        }
      },
      "CollectionResponseFolder" : {
        "required" : [ "results" ],
        "type" : "object",
        "properties" : {
          "paging" : {
            "$ref" : "#/components/schemas/Paging"
          },
          "results" : {
            "type" : "array",
            "description" : "",
            "items" : {
              "$ref" : "#/components/schemas/Folder"
            }
          }
        }
      },
      "FileStat" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "$ref" : "#/components/schemas/File"
          },
          "folder" : {
            "$ref" : "#/components/schemas/Folder"
          }
        }
      },
      "ImportFromUrlInput" : {
        "required" : [ "access", "url" ],
        "type" : "object",
        "properties" : {
          "folderPath" : {
            "type" : "string",
            "description" : "One of folderPath or folderId is required. Destination folder path for the uploaded file. If the folder path does not exist, there will be an attempt to create the folder path."
          },
          "access" : {
            "type" : "string",
            "description" : "PUBLIC_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines can index the file. PUBLIC_NOT_INDEXABLE: File is publicly accessible by anyone who has the URL. Search engines *can't* index the file. PRIVATE: File is NOT publicly accessible. Requires a signed URL to see content. Search engines *can't* index the file.\n",
            "enum" : [ "PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE" ]
          },
          "duplicateValidationScope" : {
            "type" : "string",
            "description" : "ENTIRE_PORTAL: Look for a duplicate file in the entire account. EXACT_FOLDER: Look for a duplicate file in the provided folder.\n",
            "enum" : [ "ENTIRE_PORTAL", "EXACT_FOLDER" ]
          },
          "name" : {
            "type" : "string",
            "description" : "Name to give the resulting file in the file manager."
          },
          "duplicateValidationStrategy" : {
            "type" : "string",
            "description" : "NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n",
            "enum" : [ "NONE", "REJECT", "RETURN_EXISTING" ]
          },
          "ttl" : {
            "type" : "string",
            "description" : "Time to live. If specified the file will be deleted after the given time frame. If left unset, the file will exist indefinitely"
          },
          "overwrite" : {
            "type" : "boolean",
            "description" : "If true, will overwrite existing file if one with the same name and extension exists in the given folder. The overwritten file will be deleted and the uploaded file will take its place with a new ID. If unset or set as false, the new file's name will be updated to prevent colliding with existing file if one exists with the same path, name, and extension"
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "url" : {
            "type" : "string",
            "description" : "URL to download the new file from."
          },
          "folderId" : {
            "type" : "string",
            "description" : "One of folderId or folderPath is required. Destination folderId for the uploaded file."
          }
        }
      },
      "FileUpdateInput" : {
        "type" : "object",
        "properties" : {
          "access" : {
            "type" : "string",
            "description" : "NONE: Do not run any duplicate validation. REJECT: Reject the upload if a duplicate is found. RETURN_EXISTING: If a duplicate file is found, do not upload a new file and return the found duplicate instead.\n",
            "enum" : [ "PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE" ]
          },
          "parentFolderId" : {
            "type" : "string",
            "description" : "FolderId where the file should be moved to. folderId and folderPath parameters cannot be set at the same time."
          },
          "name" : {
            "type" : "string",
            "description" : "New name for the file."
          },
          "parentFolderPath" : {
            "type" : "string",
            "description" : "Folder path where the file should be moved to. folderId and folderPath parameters cannot be set at the same time."
          },
          "clearExpires" : {
            "type" : "boolean"
          },
          "isUsableInContent" : {
            "type" : "boolean",
            "description" : "Mark whether the file should be used in new content or not."
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "description" : "Object for updating files."
      },
      "SignedUrl" : {
        "required" : [ "expiresAt", "extension", "name", "size", "type", "url" ],
        "type" : "object",
        "properties" : {
          "extension" : {
            "type" : "string",
            "description" : "Extension of the requested file."
          },
          "size" : {
            "type" : "integer",
            "description" : "Size in bytes of the requested file.",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the requested file."
          },
          "width" : {
            "type" : "integer",
            "description" : "For image and video files. The width of the file.",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER."
          },
          "url" : {
            "type" : "string",
            "description" : "Signed URL with access to the specified file. Anyone with this URL will be able to access the file until it expires."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "Timestamp of when the URL will no longer grant access to the file.",
            "format" : "date-time"
          },
          "height" : {
            "type" : "integer",
            "description" : "For image and video files. The height of the file.",
            "format" : "int32"
          }
        },
        "description" : "Signed Url object with optional ancillary metadata of requested file"
      },
      "PreviousPage" : {
        "required" : [ "before" ],
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          }
        }
      },
      "FolderInput" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "parentFolderId" : {
            "type" : "string",
            "description" : "FolderId of the parent of the created folder. If not specified, the folder will be created at the root level. parentFolderId and parentFolderPath cannot be set at the same time."
          },
          "parentPath" : {
            "type" : "string",
            "description" : "Path of the parent of the created folder. If not specified the folder will be created at the root level. parentFolderPath and parentFolderId cannot be set at the same time."
          },
          "name" : {
            "type" : "string",
            "description" : "Desired name for the folder."
          }
        },
        "description" : "Object for creating a folder."
      },
      "FolderUpdateInputWithId" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "parentFolderId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "ImportFromUrlTaskLocator" : {
        "required" : [ "id", "links" ],
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.",
            "example" : [ {
              "status" : "https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status"
            } ]
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the task",
            "example" : "57122e26-59f8-4cfc-ba53-96e30c816762"
          }
        },
        "description" : "Information on the task that has been started, and where to check it's status.",
        "example" : {
          "id" : "57122e26-59f8-4cfc-ba53-96e30c816762",
          "links" : [ {
            "status" : "https://api.hubspot.com/files/v3/files/import-from-url/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status"
          } ]
        }
      },
      "File" : {
        "required" : [ "access", "archived", "createdAt", "id", "updatedAt" ],
        "type" : "object",
        "properties" : {
          "extension" : {
            "type" : "string",
            "description" : "Extension of the file. ex: .jpg, .png, .gif, .pdf, etc."
          },
          "access" : {
            "type" : "string",
            "description" : "File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.",
            "enum" : [ "PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE", "HIDDEN_SENSITIVE", "SENSITIVE" ]
          },
          "parentFolderId" : {
            "type" : "string",
            "description" : "ID of the folder the file is in."
          },
          "sourceGroup" : {
            "type" : "string"
          },
          "fileMd5" : {
            "type" : "string"
          },
          "encoding" : {
            "type" : "string",
            "description" : "Encoding of the file."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER."
          },
          "isUsableInContent" : {
            "type" : "boolean",
            "description" : "Previously \"archied\". Indicates if the file should be used when creating new content like web pages."
          },
          "url" : {
            "type" : "string",
            "description" : "URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain."
          },
          "expiresAt" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "Creation time of the file object.",
            "format" : "date-time"
          },
          "archivedAt" : {
            "type" : "string",
            "description" : "Deletion time of the file object.",
            "format" : "date-time"
          },
          "path" : {
            "type" : "string",
            "description" : "Path of the file in the file manager."
          },
          "archived" : {
            "type" : "boolean",
            "description" : "If the file is deleted."
          },
          "size" : {
            "type" : "integer",
            "description" : "Size of the file in bytes.",
            "format" : "int64"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the file."
          },
          "width" : {
            "type" : "integer",
            "description" : "For image and video files, the width of the content.",
            "format" : "int32"
          },
          "id" : {
            "type" : "string",
            "description" : "File ID."
          },
          "defaultHostingUrl" : {
            "type" : "string",
            "description" : "Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file."
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "Timestamp of the latest update to the file.",
            "format" : "date-time"
          },
          "height" : {
            "type" : "integer",
            "description" : "For image and video files, the height of the content.",
            "format" : "int32"
          }
        },
        "description" : "File"
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string"
          },
          "after" : {
            "type" : "string"
          }
        }
      },
      "FolderUpdateTaskLocator" : {
        "required" : [ "id", "links" ],
        "type" : "object",
        "properties" : {
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Links for where to check information related to the task. The `status` link gives the URL for where to check the status of the task.",
            "example" : [ {
              "status" : "https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status"
            } ]
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the task",
            "example" : "57122e26-59f8-4cfc-ba53-96e30c816762"
          }
        },
        "description" : "Information on the task that has been started, and where to check it's status.",
        "example" : {
          "id" : "57122e26-59f8-4cfc-ba53-96e30c816762",
          "links" : [ {
            "status" : "https://api.hubspot.com/files/v3/folders/update/async/tasks/57122e26-59f8-4cfc-ba53-96e30c816762/status"
          } ]
        }
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "files" : "Read from and write to my Files",
              "files.ui_hidden.read" : "View hidden files"
            }
          }
        }
      },
      "private_apps" : {
        "type" : "apiKey",
        "name" : "private-app",
        "in" : "header"
      }
    }
  },
  "x-hubspot-available-client-libraries" : [ "PHP", "Node", "Ruby", "Python" ],
  "x-hubspot-product-tier-requirements" : {
    "marketing" : "FREE",
    "sales" : "FREE",
    "service" : "FREE",
    "cms" : "STARTER"
  }
}